S := <Root>

Root := 'import random
node_stack = []
lower_bound_stack = [-100]
upper_bound_stack = [100]
def left_child(LowerBound, node_value, parent_node):
	node_value = random.randint(LowerBound, node_value)
	new_node = Node(node_value)
	parent_node.add_left_child(new_node)
	return new_node
def right_child(node_value, UpperBound, parent_node):
	node_value = random.randint(node_value, UpperBound)
	new_node = Node(node_value)
	parent_node.add_right_child(new_node)
	return new_node
node_value = random.randint(lower_bound_stack[-1], upper_bound_stack[-1])
node = Node(node_value)
node_stack.append(node)
'
	<left_child>
	<right_child>
'
root = node_stack[-1]
'

left_child := '' | '
lower_bound_stack.append(lower_bound_stack[-1])
upper_bound_stack.append(node_stack[-1].value)
node = left_child(lower_bound_stack[-1], upper_bound_stack[-1], node_stack[-1])
node_stack.append(node)'
	<left_child>
	<right_child>
'
node_stack.pop()
lower_bound_stack.pop()
upper_bound_stack.pop()
'

right_child := '' | '
lower_bound_stack.append(node_stack[-1].value)
upper_bound_stack.append(upper_bound_stack[-1])
node = right_child(lower_bound_stack[-1], upper_bound_stack[-1], node_stack[-1])
node_stack.append(node)
'
	<left_child>
	<right_child>
'
node_stack.pop()
lower_bound_stack.pop()
upper_bound_stack.pop()
'
